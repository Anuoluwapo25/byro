import React, { Component, useState } from "react";
import { Trash2, Edit3, Search, Download } from "lucide-react";
import { going, notGoing, waitlist } from "../../assets/index";
import Image from "next/image";
import { useReactToPrint } from "react-to-print";
import { useRef } from "react";

const PrintableAttendeeList = React.forwardRef(({ attendeesData }, ref) => {
  const goingAttendees = attendeesData.filter((attendee) => attendee.isGoing);

  const [eventName, setEventName] = React.useState("");

  React.useEffect(() => {
    fetch("/api/events/[slug]")
      .then((res) => res.json())
      .then((data) => {
        if (data && data.name) setEventName(data.name);
      })
      .catch(() => setEventName(""));
  }, []);

  return (
    <div ref={ref} className="p-6 bg-white">
      <div className="text-center mb-6"></div>
      <div className="text-center mb-6">
        <h1 className="text-xl font-bold text-gray-900 mb-2">
          {eventName
            ? `${eventName} Attendee List`
            : "Event Attendees List"}
        </h1>
        <p className="text-gray-600 text-sm">
          Approved Attendees ({goingAttendees.length})
        </p>
        <p className="text-xs text-gray-500 mt-2">
          Generated on {new Date().toLocaleDateString()}
        </p>
      </div>

      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-50">
            <th className="border border-gray-300 px-3 py-2 text-left font-semibold text-sm">
              #
            </th>
            <th className="border border-gray-300 px-3 py-2 text-left font-semibold text-sm">
              Name
            </th>
            <th className="border border-gray-300 px-3 py-2 text-left font-semibold text-sm">
              Email
            </th>
          </tr>
        </thead>
        <tbody>
          {goingAttendees.map((attendee, index) => (
            <tr
              key={attendee.id}
              className={index % 2 === 0 ? "bg-white" : "bg-gray-50"}
            >
              <td className="border border-gray-300 px-3 py-2 text-sm">
                {index + 1}
              </td>
              <td className="border border-gray-300 px-3 py-2 font-medium text-sm">
                {attendee.name}
              </td>
              <td className="border border-gray-300 px-3 py-2 text-sm">
                {attendee.email}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="mt-6 text-center text-xs text-gray-500">
        <p>Generated by Byro Ticketing Solutions</p>
      </div>
    </div>
  );
});

const Attendees = () => {
  const [attendeesData, setAttendeesData] = useState([
    {
      id: 1,
      name: "Francis David",
      email: "disual@byro.africa",
      isGoing: true,
    },
    {
      id: 2,
      name: "Samuel Ajayi",
      email: "sam@byro.africa",
      isGoing: false,
    },
    {
      id: 3,
      name: "Robert Aruleba",
      email: "Robert@byro.africa",
      isGoing: false,
    },
    {
      id: 4,
      name: "Temitope",
      email: "Temi@byro.africa",
      isGoing: true,
    },
  ]);

  const componentRef = useRef();
  const handlePrint = useReactToPrint({
    contentRef: componentRef,
    documentTitle: `Event-Attendees-${new Date().toLocaleDateString()}`,
    pageStyle: `
      @page {
        size: A4;
        margin: 0.5in;
      }
      @media print{
        body { -webkit-print-color-adjust: exact; }
      }
    `,
  });

  const [searchTerm, setSearchTerm] = useState("");

  const goingCount = attendeesData.filter(
    (attendee) => attendee.isGoing
  ).length;
  const notGoingCount = attendeesData.filter(
    (attendee) => !attendee.isGoing
  ).length;
  const waitlistCount = attendeesData.filter(
    (attendee) => attendee.isWaitlisted
  ).length;

  const filteredAttendees = attendeesData.filter(
    (attendee) =>
      attendee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      attendee.email.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="p-3 sm:p-4 max-w-5xl mx-auto">
      {/* Top Section - Stats and Actions */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-around gap-4 mb-6">
        
        <div className="bg-white border border-gray-200 rounded-lg shadow-sm p-3 sm:p-4">
          <div className="flex justify-center space-x-4 sm:space-x-6">
            <div className="flex flex-col items-center space-y-2">
              <div className="flex items-center space-x-1 sm:space-x-2">
                <Image src={waitlist} className="h-4 w-4 sm:h-5 sm:w-5" alt="Waitlist" />
                <p className="text-gray-600 text-xs sm:text-sm font-medium">Waitlist</p>
              </div>
              <p className="text-gray-900 font-bold text-lg sm:text-xl">
                {waitlistCount}
              </p>
            </div>

            <div className="flex flex-col items-center space-y-2">
              <div className="flex items-center space-x-1 sm:space-x-2">
                <Image src={going} className="h-4 w-4 sm:h-5 sm:w-5" alt="Going" />
                <p className="text-gray-600 text-xs sm:text-sm font-medium">Going</p>
              </div>
              <p className="text-green-600 font-bold text-lg sm:text-xl">{goingCount}</p>
            </div>

            <div className="flex flex-col items-center space-y-2">
              <div className="flex items-center space-x-1 sm:space-x-2">
                <Image src={notGoing} className="h-4 w-4 sm:h-5 sm:w-5" alt="Not Going" />
                <p className="text-gray-600 text-xs sm:text-sm font-medium">Not Going</p>
              </div>
              <p className="text-red-500 font-bold text-lg sm:text-xl">{notGoingCount}</p>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col space-y-2 lg:flex-shrink-0">
          <button className="bg-[#007AFF] hover:bg-[#0056CC] text-white font-medium px-4 py-2 sm:px-5 sm:py-2.5 rounded-lg transition-colors duration-200 shadow-sm text-sm">
            Invite
          </button>

          <button className="flex items-center justify-center space-x-2 bg-[#007AFF] hover:bg-[#0056CC] text-white font-medium px-4 py-2 sm:px-5 sm:py-2.5 rounded-lg transition-colors duration-200 shadow-sm text-sm">
            <Edit3 className="w-4 h-4" />
            <span>Edit Event</span>
          </button>
        </div>
      </div>

      {/* Header and Search */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-5">
        <div>
          <h1 className="text-gray-900 font-bold text-lg sm:text-xl">Attendees</h1>
  
        </div>

        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <input
            type="search"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="bg-gray-50 border border-none pl-9 pr-3 py-2 sm:py-2.5 rounded-lg text-gray-900 placeholder-gray-500 outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent transition-all duration-200 w-full sm:w-64 text-sm"
            placeholder="Search for attendee..."
          />
        </div>
      </div>

      {/* Attendees List */}
      <div className="bg-white border border-gray-100 rounded-lg shadow-sm overflow-hidden">
        {filteredAttendees.length === 0 ? (
          <div className="text-center py-8">
            <div className="text-gray-400 mb-3">
              <Search className="w-8 h-8 mx-auto" />
            </div>
            <h3 className="text-base font-semibold text-gray-900 mb-2">
              No attendees found
            </h3>
            <p className="text-gray-600 text-sm">Try adjusting your search terms</p>
          </div>
        ) : (
          <div className="divide-y divide-gray-100">
            {filteredAttendees.map((attendee, index) => (
              <div
                key={attendee.id}
                className="flex flex-col sm:flex-row sm:items-center sm:justify-between p-3 sm:p-4 hover:bg-gray-50 transition-colors duration-150 gap-3 sm:gap-0"
              >
                {/* Attendee Info */}
                <div className="flex items-center space-x-3 flex-1">
                  <div className="w-8 h-8 bg-gradient-to-br from-[#007AFF] to-[#0056CC] rounded-full flex items-center justify-center text-white font-semibold text-xs flex-shrink-0">
                    {attendee.name.charAt(0).toUpperCase()}
                  </div>

                  <div className="flex-1 min-w-0">
                    <h3 className="text-gray-900 font-semibold text-sm truncate">
                      {attendee.name}
                    </h3>
                    {/* Show email on mobile */}
                    <p className="text-gray-600 text-xs truncate sm:hidden">
                      {attendee.email}
                    </p>
                  </div>
                </div>

                {/* Email - Hidden on mobile */}
                <div className="flex-1 min-w-0 px-3 hidden sm:block">
                  <p className="text-gray-600 text-sm truncate">
                    {attendee.email}
                  </p>
                </div>

                {/* Status and Actions */}
                <div className="flex items-center justify-between sm:justify-end space-x-3 flex-shrink-0">
                  {/* Status Badge */}
                  <span
                    className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${
                      attendee.isGoing
                        ? "bg-green-100 text-green-700 border border-green-200"
                        : "bg-red-100 text-red-700 border border-red-200"
                    }`}
                  >
                    {attendee.isGoing ? "Going" : "Not Going"}
                  </span>

                  {/* Action Buttons */}
                  <div className="flex items-center space-x-1">
                    <button className="p-1.5 text-gray-400 hover:text-[#007AFF] hover:bg-blue-50 rounded-lg transition-colors duration-150">
                      <Edit3 className="w-3.5 h-3.5" />
                    </button>
                    <button className="p-1.5 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors duration-150">
                      <Trash2 className="w-3.5 h-3.5" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Download Button */}
      <div className="mt-4">
        <button
          onClick={handlePrint}
          className="flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700 text-white font-medium px-4 py-2 sm:px-5 sm:py-2.5 rounded-lg transition-colors duration-200 shadow-sm text-sm"
        >
          <Download className="w-4 h-4" />
          <span>Download PDF</span>
        </button>
      </div>

      {/* Hidden Printable Component */}
      <div style={{ display: "none" }}>
        <PrintableAttendeeList
          ref={componentRef}
          attendeesData={attendeesData}
        />
      </div>
    </div>
  );
};

export default Attendees;
